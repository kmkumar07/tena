/* flexbox mixins */

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex-direction($properties) {
  -webkit-flex-direction: $properties;
  -ms-flex-direction: $properties;
  flex-direction: $properties;
}

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}


@mixin flex($values) {
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}


@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
  -moz-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}



@mixin justify-content($value: flex-start) {
  @if $value==flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  }

  @else if $value==flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  }

  @else if $value==space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  }

  @else if $value==space-around {
    -ms-flex-pack: distribute;
  }

  @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }

  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}



@mixin align-items($properties) {
  @if $properties=='flex-start' {
    -webkit-align-items: flex-start;
    -ms-flex-align: start;
    align-items: flex-start;
  }

  @else if $properties=='flex-end' {
    -webkit-align-items: flex-end;
    -ms-flex-align: end;
    align-items: flex-end;
  }

  @else if $properties=='center' {
    -webkit-align-items: center;
    -ms-flex-align: center;
    align-items: center;
  }

  @else if $properties=='baseline' {
    -webkit-align-items: baseline;
    -ms-flex-align: baseline;
    align-items: baseline;
  }

  @else if $properties=='stretch' {
    -webkit-align-items: stretch;
    -ms-flex-align: stretch;
    align-items: stretch;
  }
}


@mixin align-self($properties) {
  @if $properties=='auto' {
    -webkit-align-self: auto;
    -ms-flex-item-align: auto;
    align-self: auto;
  }

  @else if $properties=='flex-start' {
    -webkit-align-self: flex-start;
    -ms-flex-item-align: start;
    align-self: flex-start;
  }

  @else if $properties=='flex-end' {
    -webkit-align-self: flex-end;
    -ms-flex-item-align: end;
    align-self: flex-end;
  }

  @else if $properties=='center' {
    -webkit-align-self: center;
    -ms-flex-item-align: center;
    align-self: center;
  }

  @else if $properties=='baseline' {
    -webkit-align-self: baseline;
    -ms-flex-item-align: baseline;
    align-self: baseline;
  }

  @else if $properties=='stretch' {
    -webkit-align-self: stretch;
    -ms-flex-item-align: stretch;
    align-self: stretch;
  }
}


@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}


@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

/* box-shadow mixins */


// @include box-shadow(0, 0, 0, rgba(0,0,0,1));


@mixin box-shadow($leftshadow, $topshadow, $blurshadow, $colorShadow) {
  -webkit-box-shadow: $leftshadow $topshadow $blurshadow $colorShadow;
  -moz-box-shadow: $leftshadow $topshadow $blurshadow $colorShadow;
  box-shadow: $leftshadow $topshadow $blurshadow $colorShadow;
}



/* margin-padding mixins */

@mixin margin-padding($m-direction, $m-amount, $p-direction, $p-amount) {
  @if $m-direction==all {
    margin: $m-amount;
  }

  @else {
    margin-#{$m-direction}: $m-amount;
  }

  @if $p-direction==all {
    padding: $p-amount;
  }

  @else {
    padding-#{$p-direction}: $p-amount;
  }
}

/* circule-mixins */

.circle {
  $size: 100px;
  width: $size;
  height: $size;
  border-radius: calc($size / 2);
  overflow: hidden;
  @include flexbox;
  @include align-items(center);
  @include justify-content(center);
  @include align-self(center);
  flex-shrink: 0;
}

/* pseudo-mixins */

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

/* truncate-mixins */

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* avatar-mixins */

@mixin avatar($size, $circle: false) {
  width: $size;
  height: $size;

  @if $circle {
    border-radius: $size / 2;
  }
}

/* postion-mixins */

@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);

    @if $i and $i+1 <=length($args) and type-of(nth($args, $i + 1))==number {
      #{$o}: nth($args, $i + 1);
    }
  }

  position: $position;
}

// Positioning helpers
@mixin absolute($args: "") {
  @include position(absolute, $args);
}

@mixin fixed($args: "") {
  @include position(fixed, $args);
}

@mixin relative($args: "") {
  @include position(relative, $args);
}

// toggle helpers

@mixin can-toggle-branding($can-toggle-off-color: #EEEFF2,
  $can-toggle-on-color: #EEEFF2,
  $can-toggle-inactive-text: #EEEFF2,
  $can-toggle-transition: cubic-bezier(0, 1, 0.5, 1)) {

  input[type="checkbox"] {

    &[disabled]~label {
      color: rgba($can-toggle-off-color, 1);
    }

    &:focus~label,
    &:hover~label {
      .can-toggle__switch {
        background-color: $can-toggle-off-color;

        &:after {
          color: color("shades", "white");
          background-color: #000;
          box-shadow: none !important
        }
      }
    }

    &:hover~label {
      color: $can-toggle-off-color;
    }

    &:checked {
      ~label {
        &:hover {
          color: $can-toggle-on-color;
        }

        .can-toggle__switch {
          background-color: $can-toggle-on-color;

          &:after {
            color: color("shades", "white");
            background-color: color("green", "base");
            box-shadow: none !important;
          }
        }
      }

      &:focus,
      &:hover {
        ~label {
          .can-toggle__switch {
            background-color: $can-toggle-on-color;

            &:after {
              color: $can-toggle-on-color;
            }
          }
        }
      }
    }
  }

  label {

    .can-toggle__label-text {
      flex: 1;
    }

    .can-toggle__switch {
      transition: background-color 0.3s $can-toggle-transition;
      background: $can-toggle-off-color;

      &:before {
        color: #2C2B30;
      }

      &:after {
        // Autoprefixer choked here, so making the prefixes explicit
        -webkit-transition: -webkit-transform 0.3s $can-toggle-transition;
        transition: transform 0.3s $can-toggle-transition;
        color: color("shades", "white");
        background-color: #2C2B30;
      }
    }

  }
}

@mixin can-toggle-appearance ($can-toggle-width: 100px,
  $can-toggle-height: 29px,
  $can-toggle-border-radius: 5px,
  $can-toggle-offset: 2px,
  $can-toggle-label-font-size: 14px,
  $can-toggle-switch-font-size: 13px,
  $can-toggle-shadow: 0 3px 3px rgba(black, 0.4)) {
  $can-toggle-switch-width: calc($can-toggle-width/2);

  input[type="checkbox"] {

    &:focus~label,

    &:checked {
      ~label {
        .can-toggle__switch {
          &:after {
            transform: translate3d($can-toggle-width - ($can-toggle-switch-width), 0, 0);
          }
        }
      }

      &:focus,
      &:hover {
        ~label {
          .can-toggle__switch {
            &:after {
              box-shadow: $can-toggle-shadow;
            }
          }
        }
      }
    }
  }

  label {
    font-size: $can-toggle-label-font-size;
    margin: 0;

    .can-toggle__switch {
      height: $can-toggle-height;
      flex: 0 0 $can-toggle-width;
      border-radius: $can-toggle-border-radius;
      overflow: hidden;
      cursor: pointer;
      width: 100px;

      &:before {
        left: calc($can-toggle-width/2);
        font-size: $can-toggle-switch-font-size;
        line-height: $can-toggle-height;
        width: calc($can-toggle-width/2);
        padding: 0 12px;
        font-weight: $medium;
      }

      &:after {
        top: 0;
        left: 0;
        border-radius: calc($can-toggle-border-radius/2);
        width: $can-toggle-switch-width;
        line-height: $can-toggle-height;
        font-size: $can-toggle-switch-font-size;
      }

      &:hover {
        &:after {
          box-shadow: $can-toggle-shadow;
        }
      }
    }
  }
}

.can-toggle {
  position: relative;
  width: 100px;

  *,
  *:before,
  *:after {
    box-sizing: border-box;
  }

  //overflow: hidden;

  input[type="checkbox"] {
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;

    &[disabled]~label {
      pointer-events: none;

      .can-toggle__switch {
        opacity: 1;
      }
    }

    &:checked {
      ~label {

        .can-toggle__switch {

          &:before {
            content: attr(data-unchecked);
            left: 0;
          }

          &:after {
            content: attr(data-checked);
          }
        }
      }

      //&:focus
      // &:hover {
      //   ~label {}
      // }
    }
  }

  label {
    user-select: none;
    position: relative;
    display: flex;
    align-items: center;

    .can-toggle__label-text {
      flex: 1;
      padding-left: 32px;
    }

    .can-toggle__switch {
      position: relative;

      &:before {
        content: attr(data-checked);
        position: absolute;
        top: 0;
        text-transform: uppercase;
        text-align: center;
      }

      &:after {
        content: attr(data-unchecked);
        position: absolute;
        z-index: 5;
        text-transform: uppercase;
        text-align: center;
        background: #EEEFF2;
        transform: translate3d(0, 0, 0);
      }

    }

  }

  // Default values for .can-toggle class
  @include can-toggle-branding;
  @include can-toggle-appearance;

  // Create toggles of different sizes by overriding the can-toggle-appearance mixin defaults
  &.can-toggle--size-small {
    @include can-toggle-appearance (90px, // Toggle width
      28px, // Toggle height
      2px, // Toggle border radius
      1px, // Offset (distance btw switch and box)
      13px, // Label font size
      10px, // Switch font size
      0 2px 2px rgba(black, 0.4) // Switch shadow on hover/focus
    );
  }


  &.demo-rebrand-2 {
    @include can-toggle-branding (#EEEFF2, // Off state color
      #69be28, // On state color
    );
  }

}

$border-radius: ("4": 4px, "8": 8px, "12": 12px, "16": 16px);
@each $border, $border-value in $border-radius {
    .border-radius-#{$border} {
        border-radius: $border-value !important;
    }
}
//  Mixin used for Sass Framework
@mixin circle($size){
  width: $size;
  height: $size;
  border-radius: $size/2;
  overflow: hidden;
  min-width: $size;
  max-width: $size;
}
@mixin square($size, $radius){
  width: $size;
  height: $size;
  border-radius: $radius;
  overflow: hidden;
  min-width: $size;
  max-width: $size;
}
@mixin flex-position($content, $item){
  display: flex;
  justify-content: $content;
  align-items: $item;
}
@mixin text-ellipsis($width){
  overflow: hidden;
  text-overflow: ellipsis;
  width: $width;
  white-space: nowrap;
}
@mixin image($width, $height){
  overflow: hidden;
  max-height: $height;
  height: $height;
  max-width: $width;
  width: 100%;
}

@mixin dark-theme {
  [data-app-theme="dark"] & {
    @content;
  }
}